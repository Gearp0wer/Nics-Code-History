// +build dgrepcount
package main

import (
	"fmt"
	"lab3/mapreduce"
	"os"
	"regexp"
	"strconv"
	"strings"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed
// and the value is the file's contents (the third argument). The pattern
// being grepped is passed in as input_arg (the second argument)
// The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(filename string, input_arg string, contents string) (res []mapreduce.KeyValue) {
	res = []mapreduce.KeyValue{}

	re, err := regexp.Compile(input_arg)
	if err != nil {
		fmt.Fprintf(os.Stderr, "regex compile error: %v\n", err)
		return
	}

	count := 0
	lines := strings.Split(contents, "\n")
	for _, line := range lines {
		if re.MatchString(line) {
			count++
		}
	}

	res = append(res, mapreduce.KeyValue{Key: filename, Value: strconv.Itoa(count)})
	return
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
    total := 0
    for _, v := range values {
        n, err := strconv.Atoi(v)
        if err != nil {
            fmt.Fprintf(os.Stderr, "conversion error: %v\n", err)
            continue
        }
        total += n
    }
    // Return only the count; the MR framework will print key ":" output.
    return strconv.Itoa(total)
}
// Can be run in 3 ways:
// 1) Sequential (e.g., go run dgrepcount.go master sequential pattern x1.txt .. xN.txt)
// 2) Master (e.g., go run dgrepcount.go master localhost:7777 pattern x1.txt .. xN.txt)
// 3) Worker (e.g., go run dgrepcount.go worker localhost:7777 localhost:7778 &)

func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if len(os.Args) > 5 {
		if os.Args[1] == "master" {
			var mr *mapreduce.Master
			if os.Args[2] == "sequential" {
				mr = mapreduce.Sequential("dgrepcount", os.Args[3], os.Args[4:], 2, mapF, reduceF)
			} else {
				mr = mapreduce.Distributed("dgrepcount", os.Args[3], os.Args[4:], 2, os.Args[2])
			}
			mr.Wait()
		}
	} else if len(os.Args) == 4 && os.Args[1] == "worker" {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	} else {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	}
}
