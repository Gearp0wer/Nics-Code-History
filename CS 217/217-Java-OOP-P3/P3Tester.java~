/** 
 * On Mac/Linux:
 *  javac -cp .:junit-cs211.jar *.java         # compile everything
 *  java -cp .:junit-cs211.jar P3tester        # run tests
 * 
 * On windows replace colons with semicolons: (: with ;)
 *  javac -cp .;junit-cs211.jar *.java         # compile everything
 *  java -cp .;junit-cs211.jar P3tester        # run tests
 */
import static org.junit.Assert.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class P3Tester {
  public static void main(String args[]){
      org.junit.runner.JUnitCore.main("P3Tester");
    }
     
  private final double ERR = 0.00001;
        
////%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  P3Tester %%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
    @Test(timeout=1000) public void ButterCake_Class() {
      ButterCake c = new ButterCake();
      Ingredient[] ing = new Ingredient[] {Ingredient.Eggs, Ingredient.Sugar, Ingredient.Butter, Ingredient.Flour, Ingredient.BakingPowder};
      assertEquals("(ButterCake) has errors", 15.59, c.baseCost(), 0.00);
      assertEquals("(ButterCake) has errors", "Butter Cake", c.description());
      assertArrayEquals("(ButterCake) has errors", ing, c.ingredientsNeeded());
  }

    @Test(timeout=1000) public void FoamCake_Class() {
      FoamCake c = new FoamCake();
      Ingredient[] ing = new Ingredient[] {Ingredient.Eggs, Ingredient.Sugar, Ingredient.Butter, Ingredient.Flavoring};
      assertEquals("(FoamCake) has errors", 13.35, c.baseCost(), 0.00);
      assertEquals("(FoamCake) has errors", "Foam Cake", c.description());
      assertArrayEquals("(FoamCake) has errors", ing, c.ingredientsNeeded());
  }

    @Test(timeout=1000) public void Cobbler_Class() {
        Cobbler c = new Cobbler();
        Ingredient[] ing = new Ingredient[] {Ingredient.Fruit, Ingredient.Sugar, Ingredient.Salt,
                               Ingredient.Butter, Ingredient.Flour, Ingredient.BakingPowder,
                               Ingredient.Milk, Ingredient.Cinnamon};
        assertEquals("(Cobbler) has errors", 24.309999999999995, c.baseCost(), 0.000000000000000);
        assertEquals("(Cobbler) has errors", "Cobbler", c.description());
        assertArrayEquals("(Cobbler) has errors", ing, c.ingredientsNeeded());
     
    }


    @Test(timeout=1000) public void CreamPie_Class() {
        Pie c = new Pie(PieType.Cream);
        Ingredient [] ing = new Ingredient[] {Ingredient.Milk, Ingredient.Cream, Ingredient.Sugar, Ingredient.Flour, Ingredient.Eggs};
        assertEquals("(Pie Class for PieType Cream) has errors", 15.450000000000001, c.baseCost(), 0.000000000000000);
        assertEquals("(Pie Class for PieType Cream) has errors", "Cream Pie", c.description());
        assertArrayEquals("(Pie Class for PieType Cream) has errors", ing, c.ingredientsNeeded());
        
    }

    @Test(timeout=1000) public void FruitPie_Class() {
        Pie c = new Pie(PieType.Fruit);
        Ingredient [] ing = new Ingredient[] {Ingredient.Fruit, Ingredient.Sugar, Ingredient.Salt, Ingredient.Flour, Ingredient.Butter, Ingredient.Eggs};
        assertEquals("(Pie Class for PieType Fruit) has errors", 20.09, c.baseCost(), 0.00);
        assertEquals("(Pie Class for PieType Fruit) has errors", "Fruit Pie", c.description());
        assertArrayEquals("(Pie Class for PieType Fruit) has errors", ing, c.ingredientsNeeded());
    }

    @Test(timeout=1000) public void CustardPie_Class() {
        Pie c = new Pie(PieType.Custard);
        Ingredient[] ing = new Ingredient[] {Ingredient.Milk, Ingredient.Cream, Ingredient.Sugar, Ingredient.Eggs};
        assertEquals("(Pie Class for PieType Custard) has errors", 12.21, c.baseCost(), 0.00);
        assertEquals("(Pie Class for PieType Custard) has errors", "Custard Pie", c.description());
        assertArrayEquals("(Pie Class for PieType Custard) has errors", ing, c.ingredientsNeeded());
    }

    @Test(timeout=1000) public void MoldedCookies_Class() {
        MoldedCookies c = new MoldedCookies();
        Ingredient[] ing = new Ingredient[] {Ingredient.Flour, Ingredient.Sugar, Ingredient.BakingSoda,
                                Ingredient.BakingPowder, Ingredient.Milk, Ingredient.Cream,
                                Ingredient.Butter};
        assertEquals("(MoldedCookies) has errors", 18.800000000000004, c.baseCost(), 0.000000000000000);
        assertEquals("(MoldedCookies) has errors", "Molded Cookies", c.description());
        assertArrayEquals("(MoldedCookies) has errors", ing, c.ingredientsNeeded());

    }

    @Test(timeout=1000) public void NoBakeCookies_Class() {
        NoBakeCookies c = new NoBakeCookies();
        Ingredient [] ing = new Ingredient[] {Ingredient.Sugar, Ingredient.Butter, Ingredient.Milk, Ingredient.Flavoring};
        assertEquals("(NoBakeCookies) has errors", 12.590000000000002, c.baseCost(), 0.000000000000000);
        assertEquals("(NoBakeCookies) has errors", "No-Bake Cookies", c.description());
        assertArrayEquals("(NoBakeCookies) has errors", ing, c.ingredientsNeeded());
    }

    @Test(timeout=1000) public void FrozenYogurt_Class() {
        FrozenYogurt c = new FrozenYogurt();
        Ingredient[] ing = new Ingredient[] {Ingredient.Milk, Ingredient.Sugar, Ingredient.YogurtCulture, Ingredient.Flavoring};
        assertEquals("(FrozenYogurt) has errors", 13.55, c.baseCost(), 0.00);
        assertEquals("(FrozenYogurt) has errors", "Frozen Yogurt", c.description());
        assertArrayEquals("(FrozenYogurt) has errors", ing, c.ingredientsNeeded());
    }

    @Test(timeout=1000) public void IceCream_Class() {
        IceCream c = new IceCream();
        Ingredient[] ing = new Ingredient[] {Ingredient.Milk, Ingredient.Sugar, Ingredient.Gelatin, Ingredient.Eggs, Ingredient.Flavoring};
        assertEquals("(IceCream) has errors", 16.07, c.baseCost(), 0.00);
        assertEquals("(IceCream) has errors", "Ice Cream", c.description());
        assertArrayEquals("(IceCream) has errors", ing, c.ingredientsNeeded());
    }
//
//    Dessert d1 = new ButterCake();
//    Dessert d2 = new FoamCake();
//    Dessert d3 = new Cobbler();
//    Dessert d4 = new Pie(PieType.Cream);
//    Dessert d5 = new MoldedCookies();
//    Dessert d6 = new NoBakeCookies();
//    Dessert d7 = new FrozenYogurt();
//    Dessert d8 = new IceCream();
//
//    String ButterCake [] = {"Butter Cake Base Ingredients: \nEggs $3.48\nSugar $2.89\nButter $3.99\nFlour $3.24\nBakingPowder $1.99\n",
//            "Base Cost: $15.59\n",
//            "Butter Cake Base Ingredients: \nEggs $3.48\nSugar $2.89\nButter $3.99\nFlour $3.24\nBakingPowder $1.99\nNew Ingredients: \nVanilla Extract $2.44\nPowder Sugar $0.99\nM&M $1.99\n",
//            "Total Cost: $21.01\n",
//            "Butter Cake Base Ingredients: \nEggs $3.48\nSugar $2.89\nButter $3.99\nFlour $3.24\nBakingPowder $1.99\nNew Ingredients: \nPowder Sugar $0.99\nM&M $1.99\n",
//            "Total Cost: $18.57\n"};
//    String FoamCake [] = {"Foam Cake Base Ingredients: \nEggs $3.48\nSugar $2.89\nButter $3.99\nFlavoring $2.99\n",
//            "Base Cost: $13.35\n",
//            "Foam Cake Base Ingredients: \nEggs $3.48\nSugar $2.89\nButter $3.99\nFlavoring $2.99\nNew Ingredients: \nVanilla Extract $2.44\nPowder Sugar $0.99\nM&M $1.99\n",
//            "Total Cost: $18.77\n",
//            "Foam Cake Base Ingredients: \nEggs $3.48\nSugar $2.89\nButter $3.99\nFlavoring $2.99\nNew Ingredients: \nPowder Sugar $0.99\nM&M $1.99\n",
//            "Total Cost: $16.33\n"};
//    String Cobbler [] = {"Cobbler Base Ingredients: \nFruit $5.50\nSugar $2.89\nSalt $0.99\nButter $3.99\nFlour $3.24\nBakingPowder $1.99\nMilk $2.72\nCinnamon $2.99\n",
//            "Base Cost: $24.31\n",
//            "Cobbler Base Ingredients: \nFruit $5.50\nSugar $2.89\nSalt $0.99\nButter $3.99\nFlour $3.24\nBakingPowder $1.99\nMilk $2.72\nCinnamon $2.99\nNew Ingredients: \nVanilla Extract $2.44\nPowder Sugar $0.99\nM&M $1.99\n",
//            "Total Cost: $29.73\n",
//            "Cobbler Base Ingredients: \nFruit $5.50\nSugar $2.89\nSalt $0.99\nButter $3.99\nFlour $3.24\nBakingPowder $1.99\nMilk $2.72\nCinnamon $2.99\nNew Ingredients: \nPowder Sugar $0.99\nM&M $1.99\n",
//            "Total Cost: $27.29\n"};
//    String CreamPie [] = {"Cream Pie Base Ingredients: \nMilk $2.72\nCream $3.12\nSugar $2.89\nFlour $3.24\nEggs $3.48\n",
//            "Base Cost: $15.45\n",
//            "Cream Pie Base Ingredients: \nMilk $2.72\nCream $3.12\nSugar $2.89\nFlour $3.24\nEggs $3.48\nNew Ingredients: \nVanilla Extract $2.44\nPowder Sugar $0.99\nM&M $1.99\n",
//            "Total Cost: $20.87\n",
//            "Cream Pie Base Ingredients: \nMilk $2.72\nCream $3.12\nSugar $2.89\nFlour $3.24\nEggs $3.48\nNew Ingredients: \nPowder Sugar $0.99\nM&M $1.99\n",
//            "Total Cost: $18.43\n"};
//    String MoldedCookies [] = {"Molded Cookies Base Ingredients: \nFlour $3.24\nSugar $2.89\nBakingSoda $0.85\nBakingPowder $1.99\nMilk $2.72\nCream $3.12\nButter $3.99\n",
//            "Base Cost: $18.80\n",
//            "Molded Cookies Base Ingredients: \nFlour $3.24\nSugar $2.89\nBakingSoda $0.85\nBakingPowder $1.99\nMilk $2.72\nCream $3.12\nButter $3.99\nNew Ingredients: \nVanilla Extract $2.44\nPowder Sugar $0.99\nM&M $1.99\n",
//            "Total Cost: $24.22\n",
//            "Molded Cookies Base Ingredients: \nFlour $3.24\nSugar $2.89\nBakingSoda $0.85\nBakingPowder $1.99\nMilk $2.72\nCream $3.12\nButter $3.99\nNew Ingredients: \nPowder Sugar $0.99\nM&M $1.99\n",
//            "Total Cost: $21.78\n"};
//    String NoBakeCookies [] = {"No-Bake Cookies Base Ingredients: \nSugar $2.89\nButter $3.99\nMilk $2.72\nFlavoring $2.99\n",
//            "Base Cost: $12.59\n",
//            "No-Bake Cookies Base Ingredients: \nSugar $2.89\nButter $3.99\nMilk $2.72\nFlavoring $2.99\nNew Ingredients: \nVanilla Extract $2.44\nPowder Sugar $0.99\nM&M $1.99\n",
//            "Total Cost: $18.01\n",
//            "No-Bake Cookies Base Ingredients: \nSugar $2.89\nButter $3.99\nMilk $2.72\nFlavoring $2.99\nNew Ingredients: \nPowder Sugar $0.99\nM&M $1.99\n",
//            "Total Cost: $15.57\n"};
//    String FrozenYogurt [] = {"Frozen Yogurt Base Ingredients: \nMilk $2.72\nSugar $2.89\nYogurtCulture $4.95\nFlavoring $2.99\n",
//            "Base Cost: $13.55\n",
//            "Frozen Yogurt Base Ingredients: \nMilk $2.72\nSugar $2.89\nYogurtCulture $4.95\nFlavoring $2.99\nNew Ingredients: \nVanilla Extract $2.44\nPowder Sugar $0.99\nM&M $1.99\n",
//            "Total Cost: $18.97\n",
//            "Frozen Yogurt Base Ingredients: \nMilk $2.72\nSugar $2.89\nYogurtCulture $4.95\nFlavoring $2.99\nNew Ingredients: \nPowder Sugar $0.99\nM&M $1.99\n",
//            "Total Cost: $16.53\n"};
//    String IceCream [] = {"Ice Cream Base Ingredients: \nMilk $2.72\nSugar $2.89\nGelatin $3.99\nEggs $3.48\nFlavoring $2.99\n",
//            "Base Cost: $16.07\n",
//            "Ice Cream Base Ingredients: \nMilk $2.72\nSugar $2.89\nGelatin $3.99\nEggs $3.48\nFlavoring $2.99\nNew Ingredients: \nVanilla Extract $2.44\nPowder Sugar $0.99\nM&M $1.99\n",
//            "Total Cost: $21.49\n",
//            "Ice Cream Base Ingredients: \nMilk $2.72\nSugar $2.89\nGelatin $3.99\nEggs $3.48\nFlavoring $2.99\nNew Ingredients: \nPowder Sugar $0.99\nM&M $1.99\n",
//            "Total Cost: $19.05\n"};
//
//    void test_printBaseIngredient(Dessert d1, String expected, String msg1)
//    {
//        DessertPlanning plan = new DessertPlanning(d1);
//        setCapture();
//        plan.printBaseIngredients();
//        String actual = getCapture();
//        String msg = String.format("Error in " + msg1);
//        assertEquals(msg,expected, actual);
//        unsetCapture();
//    }
//
//    @Test(timeout=1000) public void DessertPlanning_Class_01()
//    {
//        test_printBaseIngredient(d1, ButterCake[0], "printBaseIngredients() for ButterCake");
//    }
//    @Test(timeout=1000) public void DessertPlanning_Class_02()
//    {
//        test_printBaseIngredient(d2, FoamCake[0], "printBaseIngredients() for FoamCake");
//    }
//    @Test(timeout=1000) public void DessertPlanning_Class_03()
//    {
//        test_printBaseIngredient(d3, Cobbler[0], "printBaseIngredients() for Cobbler");
//    }
//    @Test(timeout=1000) public void DessertPlanning_Class_04()
//    {
//        test_printBaseIngredient(d4, CreamPie[0], "printBaseIngredients() for Pie (cream)");
//    }
//    @Test(timeout=1000) public void DessertPlanning_Class_05()
//    {
//        test_printBaseIngredient(d5, MoldedCookies[0], "printBaseIngredients() for MoldedCookies");
//    }
//    @Test(timeout=1000) public void DessertPlanning_Class_06()
//    {
//        test_printBaseIngredient(d6, NoBakeCookies[0], "printBaseIngredients() for NoBakeCookies");
//    }
//    @Test(timeout=1000) public void DessertPlanning_Class_07()
//    {
//        test_printBaseIngredient(d7, FrozenYogurt[0], "printBaseIngredients() for FrozenYogurt");
//    }
//    @Test(timeout=1000) public void DessertPlanning_Class_08()
//    {
//        test_printBaseIngredient(d8, IceCream[0], "printBaseIngredients() for IceCream");
//    }
//
//    void test_printBasePrice(Dessert d1, String expected, String msg1)
//    {
//        DessertPlanning plan = new DessertPlanning(d1);
//        setCapture();
//        plan.printBasePrice();
//        String actual = getCapture();
//        String msg = String.format("Error in " + msg1);
//        assertEquals(msg, expected, actual);
//        unsetCapture();
//    }
//
//    @Test(timeout=1000) public void DessertPlanning_Class_09()
//    {
//        test_printBasePrice(d1, ButterCake[1], "printBasePrice() for ButterCake");
//    }
//    @Test(timeout=1000) public void DessertPlanning_Class_10()
//    {
//        test_printBasePrice(d2, FoamCake[1], "printBasePrice() for FoamCake");
//    }
//    @Test(timeout=1000) public void DessertPlanning_Class_11()
//    {
//        test_printBasePrice(d3, Cobbler[1], "printBasePrice() for Cobbler");
//    }
//    @Test(timeout=1000) public void DessertPlanning_Class_12()
//    {
//        test_printBasePrice(d4, CreamPie[1], "printBasePrice() for Pie (cream)");
//    }
//    @Test(timeout=1000) public void DessertPlanning_Class_13()
//    {
//        test_printBasePrice(d5, MoldedCookies[1], "printBasePrice() for MoldedCookies");
//    }
//    @Test(timeout=1000) public void DessertPlanning_Class_14()
//    {
//        test_printBasePrice(d6, NoBakeCookies[1], "printBasePrice() for NoBakeCookies");
//    }
//    @Test(timeout=1000) public void DessertPlanning_Class_15()
//    {
//        test_printBasePrice(d7, FrozenYogurt[1], "printBasePrice() for FrozenYogurt");
//    }
//    @Test(timeout=1000) public void DessertPlanning_Class_16()
//    {
//        test_printBasePrice(d8, IceCream[1], "printBasePrice() for IceCream");
//    }
//
//    void test_AddandPrint(Dessert d1, String expected, String msg1)
//    {
//        DessertPlanning plan = new DessertPlanning(d1);
//        plan.addNewIngredient("Vanilla Extract", 2.44);
//        plan.addNewIngredient("Powder Sugar", .99);
//        plan.addNewIngredient("M&M", 1.99);
//        setCapture();
//        plan.printAllIngredients();
//        String actual = getCapture();
//        String msg = String.format("Error in " + msg1);
//        assertEquals(msg, expected, actual);
//        unsetCapture();
//    }
//
//    @Test(timeout=1000) public void DessertPlanning_Class_17()
//    {
//        test_AddandPrint(d1, ButterCake[2], "printAllIngredients() after adding new ingredients");
//        test_AddandPrint(d2, FoamCake[2], "printAllIngredients() after adding new ingredients");
//        test_AddandPrint(d3, Cobbler[2], "printAllIngredients() after adding new ingredients");
//        test_AddandPrint(d4, CreamPie[2], "printAllIngredients() after adding new ingredients");
//        test_AddandPrint(d5, MoldedCookies[2], "printAllIngredients() after adding new ingredients");
//        test_AddandPrint(d6, NoBakeCookies[2], "printAllIngredients() after adding new ingredients");
//        test_AddandPrint(d7, FrozenYogurt[2], "printAllIngredients() after adding new ingredients");
//        test_AddandPrint(d8, IceCream[2], "printAllIngredients() after adding new ingredients");
//    }
//
//    void test_AddandTotalCost(Dessert d1, String expected, String msg1)
//    {
//        DessertPlanning plan = new DessertPlanning(d1);
//        plan.addNewIngredient("Vanilla Extract", 2.44);
//        plan.addNewIngredient("Powder Sugar", .99);
//        plan.addNewIngredient("M&M", 1.99);
//        setCapture();
//        plan.printTotalPrice();
//        String actual = getCapture();
//        String msg = String.format("Error in " + msg1);
//        assertEquals(msg, expected, actual);
//        unsetCapture();
//    }
//
//    @Test(timeout=1000) public void DessertPlanning_Class_18()
//    {
//        test_AddandTotalCost(d1, ButterCake[3], "printTotalPrice() after adding new ingredients");
//        test_AddandTotalCost(d2, FoamCake[3], "printTotalPrice() after adding new ingredients");
//        test_AddandTotalCost(d3, Cobbler[3], "printTotalPrice() after adding new ingredients");
//        test_AddandTotalCost(d4, CreamPie[3], "printTotalPrice() after adding new ingredients");
//        test_AddandTotalCost(d5, MoldedCookies[3], "printTotalPrice() after adding new ingredients");
//        test_AddandTotalCost(d6, NoBakeCookies[3], "printTotalPrice() after adding new ingredients");
//        test_AddandTotalCost(d7, FrozenYogurt[3], "printTotalPrice() after adding new ingredients");
//        test_AddandTotalCost(d8, IceCream[3], "printTotalPrice() after adding new ingredients");
//
//    }
//
//    void test_RemoveandPrint(Dessert d1, String expected, String msg1)
//    {
//        DessertPlanning plan = new DessertPlanning(d1);
//        plan.addNewIngredient("Vanilla Extract", 2.44);
//        plan.addNewIngredient("Powder Sugar", .99);
//        plan.addNewIngredient("M&M", 1.99);
//        plan.removeNewIngredient("Vanilla Extract");
//        setCapture();
//        plan.printAllIngredients();
//        String actual = getCapture();
//        String msg = String.format("Error in " + msg1);
//        assertEquals(msg, expected, actual);
//        unsetCapture();
//    }
//
//    @Test(timeout=1000) public void DessertPlanning_Class_19()
//    {
//        test_RemoveandPrint(d1, ButterCake[4], "printAllIngredients() after removing new ingredients");
//        test_RemoveandPrint(d2, FoamCake[4], "printAllIngredients() after removing new ingredients");
//        test_RemoveandPrint(d3, Cobbler[4], "printAllIngredients() after removing new ingredients");
//        test_RemoveandPrint(d4, CreamPie[4], "printAllIngredients() after removing new ingredients");
//        test_RemoveandPrint(d5, MoldedCookies[4], "printAllIngredients() removing adding new ingredients");
//        test_RemoveandPrint(d6, NoBakeCookies[4], "printAllIngredients() removing adding new ingredients");
//        test_RemoveandPrint(d7, FrozenYogurt[4], "printAllIngredients() removing adding new ingredients");
//        test_RemoveandPrint(d8, IceCream[4], "printAllIngredients() after removing new ingredients");
//    }
//
//    void test_RemoveandTotalCost(Dessert d1, String expected, String msg1)
//    {
//        DessertPlanning plan = new DessertPlanning(d1);
//        plan.addNewIngredient("Vanilla Extract", 2.44);
//        plan.addNewIngredient("Powder Sugar", .99);
//        plan.addNewIngredient("M&M", 1.99);
//        plan.removeNewIngredient("Vanilla Extract");
//        setCapture();
//        plan.printTotalPrice();
//        String actual = getCapture();
//        String msg = String.format("Error in " + msg1);
//        assertEquals(msg, expected, actual);
//        unsetCapture();
//    }
//
//    @Test(timeout=1000) public void DessertPlanning_Class_20()
//    {
//        test_RemoveandTotalCost(d1, ButterCake[5], "printTotalPrice() after removing new ingredients");
//        test_RemoveandTotalCost(d2, FoamCake[5], "printTotalPrice() after removing new ingredients");
//        test_RemoveandTotalCost(d3, Cobbler[5], "printTotalPrice() after removing new ingredients");
//        test_RemoveandTotalCost(d4, CreamPie[5], "printTotalPrice() after removing new ingredients");
//        test_RemoveandTotalCost(d5, MoldedCookies[5], "printTotalPrice() removing adding new ingredients");
//        test_RemoveandTotalCost(d6, NoBakeCookies[5], "printTotalPrice() removing adding new ingredients");
//        test_RemoveandTotalCost(d7, FrozenYogurt[5], "printTotalPrice() removing adding new ingredients");
//        test_RemoveandTotalCost(d8, IceCream[5], "printTotalPrice() removing adding new ingredients");
//
//    }
//
//
//    @Test(timeout=1000) public void DessertPlanning_Class_21()
//    {
//        DessertPlanning plan = new DessertPlanning(d1);
//        plan.addNewIngredient("Vanilla Extract", 2.44);
//        plan.addNewIngredient("Powder Sugar", .99);
//        plan.addNewIngredient("M&M", 1.99);
//        boolean ans = plan.removeNewIngredient("Orange Juice");
//        assertEquals("Error in removing ingredient not in list", false, ans);
//
//    }


     /////////////////////////////////////////////////////////////////////////////////////////////////
    /** the lines below are for setting up input/output redirection so that the
      * tests can see what is being set to the screen as well as produce its own
      * pseudo-keyboard input.  No test appear below here. */
  
    static ByteArrayOutputStream localOut, localErr;
    static ByteArrayInputStream localIn;
    static PrintStream sOut, sErr;
    static InputStream sIn;

    @BeforeClass public static void setup() throws Exception {
      sOut = System.out;
      sErr = System.err;
      sIn  = System.in;
      
    }
    
    @AfterClass public static void cleanup() throws Exception {
      unsetCapture();
      unsetInput();
    }
    
    private static void setCapture() {
     localOut = new ByteArrayOutputStream();
     localErr = new ByteArrayOutputStream();
     System.setOut(new PrintStream( localOut ) );
     System.setErr(new PrintStream( localErr ) );
    }

    private static String getCapture() {
     return localOut.toString().replaceAll("\\r?\\n", "\n");
    }

    private static void unsetCapture() {
     System.setOut( null );
     System.setOut( sOut );
     System.setErr( null );
     System.setErr( sErr );
    }
    
    private static void setInput(String input) {
      localIn = new ByteArrayInputStream(input.getBytes());
      System.setIn(localIn);
    }
    
    private static void unsetInput() throws IOException {
      if (localIn != null) localIn.close();
      System.setIn( null );
      System.setIn( sIn  );
    }

   
}
