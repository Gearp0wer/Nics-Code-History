Nicholas Locklear
G01090642

	So. To be transparent, I’ve had a very rough month. Unfortunately, I was not able to finish the project, so I will be writing this as if I HAD finished the project the way I wanted in the timeframe I wanted, and implemented everything the way I had hoped to. Otherwise, I would get no points both for the project and for this document, and it would also just be a very boring read. I let life get ahead of me for this, despite all the warnings, so I’m just going to triple down on this class for the next month and a half or so.

	Basically, it works like an intersection! (Crazy, right?). However, this intersection has levels to it. Cars can move as they wish as long as they have a lock, because they have the higher priority. Trucks are forced to acquire multiple locks representing them needing both to be at the head of the truck queue, as well as there being no cars attempting to access the queue. This makes it so that trucks cannot proceed so long as cars are attempting to use their respective areas of the intersection.
	
To start, I implemented eight locks into the system. Two for each of the intersections (AB, BC, and CA), with each intersection having a car and truck version of the lock, and one for tracking the completion of the program in order to properly space out the “finish()” call. Each intersection lock exists to denote the real space the vehicle is occupying, while also enforcing a level of priority between cars and trucks.The finish lock exists solely to count the vehicles that leave the intersection, with each vehicle put into a queue specifically to access the lock for the sole purpose of incrementing the global variable. The most important lock was the “priority left” lock, which would exist solely to prevent deadlocking of left hand turning vehicles. 

	To give priority to cars, I implemented a queue of waiting vehicles into each lock. Externally it was a bit more complex. The car version of the lock was simple, each car only had to acquire the car version of its intersection lock in order to proceed. In order for a truck to proceed, it not only had to have acquired the truck version of its lock, but it then would proceed to another level of logic that forced it to attempt to acquire the car version of the lock for its route. This could only be achieved if the car queue for its lock was empty, otherwise the truck thread would just be put back to sleep. At release, a truck would first release its car lock before releasing its truck lock. This let any car that had entered the queue for its respective lock to immediately jump and acquire the lock before the next truck member. This doubles both as a rule of procedure and as a method of enforcing priority. Also, the release of the priority left lock always happened to preserve priority to right hand turning vehicles. 

	Specific rules start with understanding the hierarchy I decided to enforce. At the top are cars turning right, followed by trucks turning right, then cars turning left, and then finally, trucks turning left. To prevent deadlock, ALL vehicles turning left also had to acquire the “priority left:” lock. This lock solely exists to force vehicles turning left to proceed in one at a time. Any vehicle turning left, after they leave the first section of the intersection (during the transfer call) is put at the front of their respective queue for that segment of road in order to keep them from “hanging out” somewhere above (below? beside??) the intersection. Only once they had the lock for their goal (with trucks in some cases needing to acquire five locks if they were turning left), could they call “transfer” and release the lock for the section of road they were transferring out of, as well as the priority left lock. Most of the sorting logic of the vehicles was done before any approach calls which always happened before the turn calls, with the turn calls mainly just acting as a switchboard for the current active vehicle. The queues exist so that thread sleep and thread wakeup could be used to target specific threads, instead of blanket targeting all threads.